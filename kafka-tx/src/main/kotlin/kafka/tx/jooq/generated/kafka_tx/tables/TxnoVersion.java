/*
 * This file is generated by jOOQ.
 */
package kafka.tx.jooq.generated.kafka_tx.tables;


import java.util.Collection;

import kafka.tx.jooq.generated.kafka_tx.KafkaTx;
import kafka.tx.jooq.generated.kafka_tx.Keys;
import kafka.tx.jooq.generated.kafka_tx.tables.records.TxnoVersionRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TxnoVersion extends TableImpl<TxnoVersionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>kafka-tx.txno_version</code>
     */
    public static final TxnoVersion TXNO_VERSION = new TxnoVersion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TxnoVersionRecord> getRecordType() {
        return TxnoVersionRecord.class;
    }

    /**
     * The column <code>kafka-tx.txno_version.id</code>.
     */
    public final TableField<TxnoVersionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>kafka-tx.txno_version.version</code>.
     */
    public final TableField<TxnoVersionRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER, this, "");

    private TxnoVersion(Name alias, Table<TxnoVersionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TxnoVersion(Name alias, Table<TxnoVersionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>kafka-tx.txno_version</code> table reference
     */
    public TxnoVersion(String alias) {
        this(DSL.name(alias), TXNO_VERSION);
    }

    /**
     * Create an aliased <code>kafka-tx.txno_version</code> table reference
     */
    public TxnoVersion(Name alias) {
        this(alias, TXNO_VERSION);
    }

    /**
     * Create a <code>kafka-tx.txno_version</code> table reference
     */
    public TxnoVersion() {
        this(DSL.name("txno_version"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : KafkaTx.KAFKA_TX;
    }

    @Override
    public UniqueKey<TxnoVersionRecord> getPrimaryKey() {
        return Keys.TXNO_VERSION_PKEY;
    }

    @Override
    public TxnoVersion as(String alias) {
        return new TxnoVersion(DSL.name(alias), this);
    }

    @Override
    public TxnoVersion as(Name alias) {
        return new TxnoVersion(alias, this);
    }

    @Override
    public TxnoVersion as(Table<?> alias) {
        return new TxnoVersion(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TxnoVersion rename(String name) {
        return new TxnoVersion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TxnoVersion rename(Name name) {
        return new TxnoVersion(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TxnoVersion rename(Table<?> name) {
        return new TxnoVersion(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxnoVersion where(Condition condition) {
        return new TxnoVersion(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxnoVersion where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxnoVersion where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxnoVersion where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TxnoVersion where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TxnoVersion where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TxnoVersion where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TxnoVersion where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxnoVersion whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxnoVersion whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
