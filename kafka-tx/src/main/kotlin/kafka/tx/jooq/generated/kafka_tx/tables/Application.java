/*
 * This file is generated by jOOQ.
 */
package kafka.tx.jooq.generated.kafka_tx.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import kafka.tx.jooq.generated.kafka_tx.KafkaTx;
import kafka.tx.jooq.generated.kafka_tx.Keys;
import kafka.tx.jooq.generated.kafka_tx.tables.Person.PersonPath;
import kafka.tx.jooq.generated.kafka_tx.tables.records.ApplicationRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Application extends TableImpl<ApplicationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>kafka-tx.application</code>
     */
    public static final Application APPLICATION = new Application();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApplicationRecord> getRecordType() {
        return ApplicationRecord.class;
    }

    /**
     * The column <code>kafka-tx.application.id</code>.
     */
    public final TableField<ApplicationRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>kafka-tx.application.person_id</code>.
     */
    public final TableField<ApplicationRecord, String> PERSON_ID = createField(DSL.name("person_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>kafka-tx.application.status</code>.
     */
    public final TableField<ApplicationRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>kafka-tx.application.created_at</code>.
     */
    public final TableField<ApplicationRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private Application(Name alias, Table<ApplicationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Application(Name alias, Table<ApplicationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>kafka-tx.application</code> table reference
     */
    public Application(String alias) {
        this(DSL.name(alias), APPLICATION);
    }

    /**
     * Create an aliased <code>kafka-tx.application</code> table reference
     */
    public Application(Name alias) {
        this(alias, APPLICATION);
    }

    /**
     * Create a <code>kafka-tx.application</code> table reference
     */
    public Application() {
        this(DSL.name("application"), null);
    }

    public <O extends Record> Application(Table<O> path, ForeignKey<O, ApplicationRecord> childPath, InverseForeignKey<O, ApplicationRecord> parentPath) {
        super(path, childPath, parentPath, APPLICATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ApplicationPath extends Application implements Path<ApplicationRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ApplicationPath(Table<O> path, ForeignKey<O, ApplicationRecord> childPath, InverseForeignKey<O, ApplicationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ApplicationPath(Name alias, Table<ApplicationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ApplicationPath as(String alias) {
            return new ApplicationPath(DSL.name(alias), this);
        }

        @Override
        public ApplicationPath as(Name alias) {
            return new ApplicationPath(alias, this);
        }

        @Override
        public ApplicationPath as(Table<?> alias) {
            return new ApplicationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : KafkaTx.KAFKA_TX;
    }

    @Override
    public UniqueKey<ApplicationRecord> getPrimaryKey() {
        return Keys.APPLICATION_PKEY;
    }

    @Override
    public List<ForeignKey<ApplicationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.APPLICATION__APPLICATION_PERSON_ID_FKEY);
    }

    private transient PersonPath _person;

    /**
     * Get the implicit join path to the <code>kafka-tx.person</code> table.
     */
    public PersonPath person() {
        if (_person == null)
            _person = new PersonPath(this, Keys.APPLICATION__APPLICATION_PERSON_ID_FKEY, null);

        return _person;
    }

    @Override
    public Application as(String alias) {
        return new Application(DSL.name(alias), this);
    }

    @Override
    public Application as(Name alias) {
        return new Application(alias, this);
    }

    @Override
    public Application as(Table<?> alias) {
        return new Application(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Application rename(String name) {
        return new Application(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Application rename(Name name) {
        return new Application(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Application rename(Table<?> name) {
        return new Application(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Application where(Condition condition) {
        return new Application(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Application where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Application where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Application where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Application where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Application where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Application where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Application where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Application whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Application whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
