/*
 * This file is generated by jOOQ.
 */
package kafka.tx.jooq.generated.kafka_tx.tables;


import java.util.Collection;

import kafka.tx.jooq.generated.kafka_tx.KafkaTx;
import kafka.tx.jooq.generated.kafka_tx.Keys;
import kafka.tx.jooq.generated.kafka_tx.tables.records.TxnoSequenceRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TxnoSequence extends TableImpl<TxnoSequenceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>kafka-tx.txno_sequence</code>
     */
    public static final TxnoSequence TXNO_SEQUENCE = new TxnoSequence();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TxnoSequenceRecord> getRecordType() {
        return TxnoSequenceRecord.class;
    }

    /**
     * The column <code>kafka-tx.txno_sequence.topic</code>.
     */
    public final TableField<TxnoSequenceRecord, String> TOPIC = createField(DSL.name("topic"), SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>kafka-tx.txno_sequence.seq</code>.
     */
    public final TableField<TxnoSequenceRecord, Long> SEQ = createField(DSL.name("seq"), SQLDataType.BIGINT.nullable(false), this, "");

    private TxnoSequence(Name alias, Table<TxnoSequenceRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TxnoSequence(Name alias, Table<TxnoSequenceRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>kafka-tx.txno_sequence</code> table reference
     */
    public TxnoSequence(String alias) {
        this(DSL.name(alias), TXNO_SEQUENCE);
    }

    /**
     * Create an aliased <code>kafka-tx.txno_sequence</code> table reference
     */
    public TxnoSequence(Name alias) {
        this(alias, TXNO_SEQUENCE);
    }

    /**
     * Create a <code>kafka-tx.txno_sequence</code> table reference
     */
    public TxnoSequence() {
        this(DSL.name("txno_sequence"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : KafkaTx.KAFKA_TX;
    }

    @Override
    public UniqueKey<TxnoSequenceRecord> getPrimaryKey() {
        return Keys.TXNO_SEQUENCE_PKEY;
    }

    @Override
    public TxnoSequence as(String alias) {
        return new TxnoSequence(DSL.name(alias), this);
    }

    @Override
    public TxnoSequence as(Name alias) {
        return new TxnoSequence(alias, this);
    }

    @Override
    public TxnoSequence as(Table<?> alias) {
        return new TxnoSequence(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TxnoSequence rename(String name) {
        return new TxnoSequence(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TxnoSequence rename(Name name) {
        return new TxnoSequence(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TxnoSequence rename(Table<?> name) {
        return new TxnoSequence(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxnoSequence where(Condition condition) {
        return new TxnoSequence(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxnoSequence where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxnoSequence where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxnoSequence where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TxnoSequence where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TxnoSequence where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TxnoSequence where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TxnoSequence where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxnoSequence whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxnoSequence whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
