/*
 * This file is generated by jOOQ.
 */
package kafka.tx.jooq.generated.kafka_tx;


import kafka.tx.jooq.generated.kafka_tx.tables.Application;
import kafka.tx.jooq.generated.kafka_tx.tables.Person;
import kafka.tx.jooq.generated.kafka_tx.tables.TxnoOutbox;
import kafka.tx.jooq.generated.kafka_tx.tables.TxnoSequence;
import kafka.tx.jooq.generated.kafka_tx.tables.TxnoVersion;
import kafka.tx.jooq.generated.kafka_tx.tables.records.ApplicationRecord;
import kafka.tx.jooq.generated.kafka_tx.tables.records.PersonRecord;
import kafka.tx.jooq.generated.kafka_tx.tables.records.TxnoOutboxRecord;
import kafka.tx.jooq.generated.kafka_tx.tables.records.TxnoSequenceRecord;
import kafka.tx.jooq.generated.kafka_tx.tables.records.TxnoVersionRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.QOM.ForeignKeyRule;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * kafka-tx.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ApplicationRecord> APPLICATION_PKEY = Internal.createUniqueKey(Application.APPLICATION, DSL.name("application_pkey"), new TableField[] { Application.APPLICATION.ID }, true);
    public static final UniqueKey<PersonRecord> PERSON_PKEY = Internal.createUniqueKey(Person.PERSON, DSL.name("person_pkey"), new TableField[] { Person.PERSON.ID }, true);
    public static final UniqueKey<TxnoOutboxRecord> TXNO_OUTBOX_PKEY = Internal.createUniqueKey(TxnoOutbox.TXNO_OUTBOX, DSL.name("txno_outbox_pkey"), new TableField[] { TxnoOutbox.TXNO_OUTBOX.ID }, true);
    public static final UniqueKey<TxnoOutboxRecord> TXNO_OUTBOX_UNIQUEREQUESTID_KEY = Internal.createUniqueKey(TxnoOutbox.TXNO_OUTBOX, DSL.name("txno_outbox_uniquerequestid_key"), new TableField[] { TxnoOutbox.TXNO_OUTBOX.UNIQUEREQUESTID }, true);
    public static final UniqueKey<TxnoSequenceRecord> TXNO_SEQUENCE_PKEY = Internal.createUniqueKey(TxnoSequence.TXNO_SEQUENCE, DSL.name("txno_sequence_pkey"), new TableField[] { TxnoSequence.TXNO_SEQUENCE.TOPIC, TxnoSequence.TXNO_SEQUENCE.SEQ }, true);
    public static final UniqueKey<TxnoVersionRecord> TXNO_VERSION_PKEY = Internal.createUniqueKey(TxnoVersion.TXNO_VERSION, DSL.name("txno_version_pkey"), new TableField[] { TxnoVersion.TXNO_VERSION.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ApplicationRecord, PersonRecord> APPLICATION__APPLICATION_PERSON_ID_FKEY = Internal.createForeignKey(Application.APPLICATION, DSL.name("application_person_id_fkey"), new TableField[] { Application.APPLICATION.PERSON_ID }, Keys.PERSON_PKEY, new TableField[] { Person.PERSON.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
}
