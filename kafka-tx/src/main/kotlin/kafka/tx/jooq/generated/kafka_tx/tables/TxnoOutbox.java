/*
 * This file is generated by jOOQ.
 */
package kafka.tx.jooq.generated.kafka_tx.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import kafka.tx.jooq.generated.kafka_tx.Indexes;
import kafka.tx.jooq.generated.kafka_tx.KafkaTx;
import kafka.tx.jooq.generated.kafka_tx.Keys;
import kafka.tx.jooq.generated.kafka_tx.tables.records.TxnoOutboxRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TxnoOutbox extends TableImpl<TxnoOutboxRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>kafka-tx.txno_outbox</code>
     */
    public static final TxnoOutbox TXNO_OUTBOX = new TxnoOutbox();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TxnoOutboxRecord> getRecordType() {
        return TxnoOutboxRecord.class;
    }

    /**
     * The column <code>kafka-tx.txno_outbox.id</code>.
     */
    public final TableField<TxnoOutboxRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>kafka-tx.txno_outbox.invocation</code>.
     */
    public final TableField<TxnoOutboxRecord, String> INVOCATION = createField(DSL.name("invocation"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>kafka-tx.txno_outbox.nextattempttime</code>.
     */
    public final TableField<TxnoOutboxRecord, LocalDateTime> NEXTATTEMPTTIME = createField(DSL.name("nextattempttime"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>kafka-tx.txno_outbox.attempts</code>.
     */
    public final TableField<TxnoOutboxRecord, Integer> ATTEMPTS = createField(DSL.name("attempts"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>kafka-tx.txno_outbox.blocked</code>.
     */
    public final TableField<TxnoOutboxRecord, Boolean> BLOCKED = createField(DSL.name("blocked"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>kafka-tx.txno_outbox.version</code>.
     */
    public final TableField<TxnoOutboxRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>kafka-tx.txno_outbox.uniquerequestid</code>.
     */
    public final TableField<TxnoOutboxRecord, String> UNIQUEREQUESTID = createField(DSL.name("uniquerequestid"), SQLDataType.VARCHAR(250), this, "");

    /**
     * The column <code>kafka-tx.txno_outbox.processed</code>.
     */
    public final TableField<TxnoOutboxRecord, Boolean> PROCESSED = createField(DSL.name("processed"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>kafka-tx.txno_outbox.lastattempttime</code>.
     */
    public final TableField<TxnoOutboxRecord, LocalDateTime> LASTATTEMPTTIME = createField(DSL.name("lastattempttime"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>kafka-tx.txno_outbox.topic</code>.
     */
    public final TableField<TxnoOutboxRecord, String> TOPIC = createField(DSL.name("topic"), SQLDataType.VARCHAR(250).nullable(false).defaultValue(DSL.field(DSL.raw("'*'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>kafka-tx.txno_outbox.seq</code>.
     */
    public final TableField<TxnoOutboxRecord, Long> SEQ = createField(DSL.name("seq"), SQLDataType.BIGINT, this, "");

    private TxnoOutbox(Name alias, Table<TxnoOutboxRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TxnoOutbox(Name alias, Table<TxnoOutboxRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>kafka-tx.txno_outbox</code> table reference
     */
    public TxnoOutbox(String alias) {
        this(DSL.name(alias), TXNO_OUTBOX);
    }

    /**
     * Create an aliased <code>kafka-tx.txno_outbox</code> table reference
     */
    public TxnoOutbox(Name alias) {
        this(alias, TXNO_OUTBOX);
    }

    /**
     * Create a <code>kafka-tx.txno_outbox</code> table reference
     */
    public TxnoOutbox() {
        this(DSL.name("txno_outbox"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : KafkaTx.KAFKA_TX;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IX_TXNO_OUTBOX_1, Indexes.IX_TXNO_OUTBOX_2);
    }

    @Override
    public UniqueKey<TxnoOutboxRecord> getPrimaryKey() {
        return Keys.TXNO_OUTBOX_PKEY;
    }

    @Override
    public List<UniqueKey<TxnoOutboxRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.TXNO_OUTBOX_UNIQUEREQUESTID_KEY);
    }

    @Override
    public TxnoOutbox as(String alias) {
        return new TxnoOutbox(DSL.name(alias), this);
    }

    @Override
    public TxnoOutbox as(Name alias) {
        return new TxnoOutbox(alias, this);
    }

    @Override
    public TxnoOutbox as(Table<?> alias) {
        return new TxnoOutbox(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TxnoOutbox rename(String name) {
        return new TxnoOutbox(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TxnoOutbox rename(Name name) {
        return new TxnoOutbox(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TxnoOutbox rename(Table<?> name) {
        return new TxnoOutbox(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxnoOutbox where(Condition condition) {
        return new TxnoOutbox(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxnoOutbox where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxnoOutbox where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxnoOutbox where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TxnoOutbox where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TxnoOutbox where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TxnoOutbox where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TxnoOutbox where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxnoOutbox whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxnoOutbox whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
